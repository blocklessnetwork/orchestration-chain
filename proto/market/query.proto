syntax = "proto3";
package txlabs.blocklesschain.market;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "market/params.proto";
import "market/order.proto";
import "market/completed_order.proto";
import "market/claimed_order.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/txlabs/blockless-chain/x/market/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/txlabs/blockless-chain/market/params";
  }
  // Queries a Order by index.
	rpc Order(QueryGetOrderRequest) returns (QueryGetOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/order/{index}";
	}

	// Queries a list of Order items.
	rpc OrderAll(QueryAllOrderRequest) returns (QueryAllOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/order";
	}

// Queries a CompletedOrder by index.
	rpc CompletedOrder(QueryGetCompletedOrderRequest) returns (QueryGetCompletedOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/completed_order/{index}";
	}

	// Queries a list of CompletedOrder items.
	rpc CompletedOrderAll(QueryAllCompletedOrderRequest) returns (QueryAllCompletedOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/completed_order";
	}

// Queries a ClaimedOrder by index.
	rpc ClaimedOrder(QueryGetClaimedOrderRequest) returns (QueryGetClaimedOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/claimed_order/{index}";
	}

	// Queries a list of ClaimedOrder items.
	rpc ClaimedOrderAll(QueryAllClaimedOrderRequest) returns (QueryAllClaimedOrderResponse) {
		option (google.api.http).get = "/txlabs/blockless-chain/market/claimed_order";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetOrderRequest {
	  string index = 1;

}

message QueryGetOrderResponse {
	Order order = 1 [(gogoproto.nullable) = false];
}

message QueryAllOrderRequest {
	OrderFilter filter = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllOrderResponse {
	repeated Order order = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCompletedOrderRequest {
	  string index = 1;
}

message QueryGetCompletedOrderResponse {
	CompletedOrder completedOrder = 1 [(gogoproto.nullable) = false];
}

message QueryAllCompletedOrderRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCompletedOrderResponse {
	repeated CompletedOrder completedOrder = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetClaimedOrderRequest {
	  string index = 1;

}

message QueryGetClaimedOrderResponse {
	ClaimedOrder claimedOrder = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimedOrderRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClaimedOrderResponse {
	repeated ClaimedOrder claimedOrder = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
