// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetOrderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetOrderRequest) Reset()         { *m = QueryGetOrderRequest{} }
func (m *QueryGetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderRequest) ProtoMessage()    {}
func (*QueryGetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{2}
}
func (m *QueryGetOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderRequest.Merge(m, src)
}
func (m *QueryGetOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderRequest proto.InternalMessageInfo

func (m *QueryGetOrderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetOrderResponse struct {
	Order Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
}

func (m *QueryGetOrderResponse) Reset()         { *m = QueryGetOrderResponse{} }
func (m *QueryGetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderResponse) ProtoMessage()    {}
func (*QueryGetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{3}
}
func (m *QueryGetOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderResponse.Merge(m, src)
}
func (m *QueryGetOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderResponse proto.InternalMessageInfo

func (m *QueryGetOrderResponse) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

type QueryAllOrderRequest struct {
	Filter     *OrderFilter       `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderRequest) Reset()         { *m = QueryAllOrderRequest{} }
func (m *QueryAllOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderRequest) ProtoMessage()    {}
func (*QueryAllOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{4}
}
func (m *QueryAllOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderRequest.Merge(m, src)
}
func (m *QueryAllOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderRequest proto.InternalMessageInfo

func (m *QueryAllOrderRequest) GetFilter() *OrderFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *QueryAllOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrderResponse struct {
	Order      []Order             `protobuf:"bytes,1,rep,name=order,proto3" json:"order"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderResponse) Reset()         { *m = QueryAllOrderResponse{} }
func (m *QueryAllOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderResponse) ProtoMessage()    {}
func (*QueryAllOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{5}
}
func (m *QueryAllOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderResponse.Merge(m, src)
}
func (m *QueryAllOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderResponse proto.InternalMessageInfo

func (m *QueryAllOrderResponse) GetOrder() []Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *QueryAllOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCompletedOrderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCompletedOrderRequest) Reset()         { *m = QueryGetCompletedOrderRequest{} }
func (m *QueryGetCompletedOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCompletedOrderRequest) ProtoMessage()    {}
func (*QueryGetCompletedOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{6}
}
func (m *QueryGetCompletedOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedOrderRequest.Merge(m, src)
}
func (m *QueryGetCompletedOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedOrderRequest proto.InternalMessageInfo

func (m *QueryGetCompletedOrderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCompletedOrderResponse struct {
	CompletedOrder CompletedOrder `protobuf:"bytes,1,opt,name=completedOrder,proto3" json:"completedOrder"`
}

func (m *QueryGetCompletedOrderResponse) Reset()         { *m = QueryGetCompletedOrderResponse{} }
func (m *QueryGetCompletedOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCompletedOrderResponse) ProtoMessage()    {}
func (*QueryGetCompletedOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{7}
}
func (m *QueryGetCompletedOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedOrderResponse.Merge(m, src)
}
func (m *QueryGetCompletedOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedOrderResponse proto.InternalMessageInfo

func (m *QueryGetCompletedOrderResponse) GetCompletedOrder() CompletedOrder {
	if m != nil {
		return m.CompletedOrder
	}
	return CompletedOrder{}
}

type QueryAllCompletedOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedOrderRequest) Reset()         { *m = QueryAllCompletedOrderRequest{} }
func (m *QueryAllCompletedOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCompletedOrderRequest) ProtoMessage()    {}
func (*QueryAllCompletedOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{8}
}
func (m *QueryAllCompletedOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedOrderRequest.Merge(m, src)
}
func (m *QueryAllCompletedOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedOrderRequest proto.InternalMessageInfo

func (m *QueryAllCompletedOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCompletedOrderResponse struct {
	CompletedOrder []CompletedOrder    `protobuf:"bytes,1,rep,name=completedOrder,proto3" json:"completedOrder"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedOrderResponse) Reset()         { *m = QueryAllCompletedOrderResponse{} }
func (m *QueryAllCompletedOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCompletedOrderResponse) ProtoMessage()    {}
func (*QueryAllCompletedOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{9}
}
func (m *QueryAllCompletedOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedOrderResponse.Merge(m, src)
}
func (m *QueryAllCompletedOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedOrderResponse proto.InternalMessageInfo

func (m *QueryAllCompletedOrderResponse) GetCompletedOrder() []CompletedOrder {
	if m != nil {
		return m.CompletedOrder
	}
	return nil
}

func (m *QueryAllCompletedOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetClaimedOrderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetClaimedOrderRequest) Reset()         { *m = QueryGetClaimedOrderRequest{} }
func (m *QueryGetClaimedOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimedOrderRequest) ProtoMessage()    {}
func (*QueryGetClaimedOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{10}
}
func (m *QueryGetClaimedOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimedOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimedOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimedOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimedOrderRequest.Merge(m, src)
}
func (m *QueryGetClaimedOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimedOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimedOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimedOrderRequest proto.InternalMessageInfo

func (m *QueryGetClaimedOrderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetClaimedOrderResponse struct {
	ClaimedOrder ClaimedOrder `protobuf:"bytes,1,opt,name=claimedOrder,proto3" json:"claimedOrder"`
}

func (m *QueryGetClaimedOrderResponse) Reset()         { *m = QueryGetClaimedOrderResponse{} }
func (m *QueryGetClaimedOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimedOrderResponse) ProtoMessage()    {}
func (*QueryGetClaimedOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{11}
}
func (m *QueryGetClaimedOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimedOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimedOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimedOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimedOrderResponse.Merge(m, src)
}
func (m *QueryGetClaimedOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimedOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimedOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimedOrderResponse proto.InternalMessageInfo

func (m *QueryGetClaimedOrderResponse) GetClaimedOrder() ClaimedOrder {
	if m != nil {
		return m.ClaimedOrder
	}
	return ClaimedOrder{}
}

type QueryAllClaimedOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimedOrderRequest) Reset()         { *m = QueryAllClaimedOrderRequest{} }
func (m *QueryAllClaimedOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimedOrderRequest) ProtoMessage()    {}
func (*QueryAllClaimedOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{12}
}
func (m *QueryAllClaimedOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimedOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimedOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimedOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimedOrderRequest.Merge(m, src)
}
func (m *QueryAllClaimedOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimedOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimedOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimedOrderRequest proto.InternalMessageInfo

func (m *QueryAllClaimedOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClaimedOrderResponse struct {
	ClaimedOrder []ClaimedOrder      `protobuf:"bytes,1,rep,name=claimedOrder,proto3" json:"claimedOrder"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimedOrderResponse) Reset()         { *m = QueryAllClaimedOrderResponse{} }
func (m *QueryAllClaimedOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimedOrderResponse) ProtoMessage()    {}
func (*QueryAllClaimedOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{13}
}
func (m *QueryAllClaimedOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimedOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimedOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimedOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimedOrderResponse.Merge(m, src)
}
func (m *QueryAllClaimedOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimedOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimedOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimedOrderResponse proto.InternalMessageInfo

func (m *QueryAllClaimedOrderResponse) GetClaimedOrder() []ClaimedOrder {
	if m != nil {
		return m.ClaimedOrder
	}
	return nil
}

func (m *QueryAllClaimedOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNodeRegistrationRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeRegistrationRequest) Reset()         { *m = QueryGetNodeRegistrationRequest{} }
func (m *QueryGetNodeRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeRegistrationRequest) ProtoMessage()    {}
func (*QueryGetNodeRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{14}
}
func (m *QueryGetNodeRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeRegistrationRequest.Merge(m, src)
}
func (m *QueryGetNodeRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeRegistrationRequest proto.InternalMessageInfo

func (m *QueryGetNodeRegistrationRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNodeRegistrationResponse struct {
	NodeRegistration NodeRegistration `protobuf:"bytes,1,opt,name=nodeRegistration,proto3" json:"nodeRegistration"`
}

func (m *QueryGetNodeRegistrationResponse) Reset()         { *m = QueryGetNodeRegistrationResponse{} }
func (m *QueryGetNodeRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeRegistrationResponse) ProtoMessage()    {}
func (*QueryGetNodeRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{15}
}
func (m *QueryGetNodeRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeRegistrationResponse.Merge(m, src)
}
func (m *QueryGetNodeRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeRegistrationResponse proto.InternalMessageInfo

func (m *QueryGetNodeRegistrationResponse) GetNodeRegistration() NodeRegistration {
	if m != nil {
		return m.NodeRegistration
	}
	return NodeRegistration{}
}

type QueryAllNodeRegistrationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeRegistrationRequest) Reset()         { *m = QueryAllNodeRegistrationRequest{} }
func (m *QueryAllNodeRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeRegistrationRequest) ProtoMessage()    {}
func (*QueryAllNodeRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{16}
}
func (m *QueryAllNodeRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeRegistrationRequest.Merge(m, src)
}
func (m *QueryAllNodeRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeRegistrationRequest proto.InternalMessageInfo

func (m *QueryAllNodeRegistrationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNodeRegistrationResponse struct {
	NodeRegistration []NodeRegistration  `protobuf:"bytes,1,rep,name=nodeRegistration,proto3" json:"nodeRegistration"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeRegistrationResponse) Reset()         { *m = QueryAllNodeRegistrationResponse{} }
func (m *QueryAllNodeRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeRegistrationResponse) ProtoMessage()    {}
func (*QueryAllNodeRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{17}
}
func (m *QueryAllNodeRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeRegistrationResponse.Merge(m, src)
}
func (m *QueryAllNodeRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeRegistrationResponse proto.InternalMessageInfo

func (m *QueryAllNodeRegistrationResponse) GetNodeRegistration() []NodeRegistration {
	if m != nil {
		return m.NodeRegistration
	}
	return nil
}

func (m *QueryAllNodeRegistrationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "txlabs.blocklesschain.market.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "txlabs.blocklesschain.market.QueryParamsResponse")
	proto.RegisterType((*QueryGetOrderRequest)(nil), "txlabs.blocklesschain.market.QueryGetOrderRequest")
	proto.RegisterType((*QueryGetOrderResponse)(nil), "txlabs.blocklesschain.market.QueryGetOrderResponse")
	proto.RegisterType((*QueryAllOrderRequest)(nil), "txlabs.blocklesschain.market.QueryAllOrderRequest")
	proto.RegisterType((*QueryAllOrderResponse)(nil), "txlabs.blocklesschain.market.QueryAllOrderResponse")
	proto.RegisterType((*QueryGetCompletedOrderRequest)(nil), "txlabs.blocklesschain.market.QueryGetCompletedOrderRequest")
	proto.RegisterType((*QueryGetCompletedOrderResponse)(nil), "txlabs.blocklesschain.market.QueryGetCompletedOrderResponse")
	proto.RegisterType((*QueryAllCompletedOrderRequest)(nil), "txlabs.blocklesschain.market.QueryAllCompletedOrderRequest")
	proto.RegisterType((*QueryAllCompletedOrderResponse)(nil), "txlabs.blocklesschain.market.QueryAllCompletedOrderResponse")
	proto.RegisterType((*QueryGetClaimedOrderRequest)(nil), "txlabs.blocklesschain.market.QueryGetClaimedOrderRequest")
	proto.RegisterType((*QueryGetClaimedOrderResponse)(nil), "txlabs.blocklesschain.market.QueryGetClaimedOrderResponse")
	proto.RegisterType((*QueryAllClaimedOrderRequest)(nil), "txlabs.blocklesschain.market.QueryAllClaimedOrderRequest")
	proto.RegisterType((*QueryAllClaimedOrderResponse)(nil), "txlabs.blocklesschain.market.QueryAllClaimedOrderResponse")
	proto.RegisterType((*QueryGetNodeRegistrationRequest)(nil), "txlabs.blocklesschain.market.QueryGetNodeRegistrationRequest")
	proto.RegisterType((*QueryGetNodeRegistrationResponse)(nil), "txlabs.blocklesschain.market.QueryGetNodeRegistrationResponse")
	proto.RegisterType((*QueryAllNodeRegistrationRequest)(nil), "txlabs.blocklesschain.market.QueryAllNodeRegistrationRequest")
	proto.RegisterType((*QueryAllNodeRegistrationResponse)(nil), "txlabs.blocklesschain.market.QueryAllNodeRegistrationResponse")
}

func init() { proto.RegisterFile("market/query.proto", fileDescriptor_dc4839d34748ebb1) }

var fileDescriptor_dc4839d34748ebb1 = []byte{
	// 938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x0d, 0x89, 0x60, 0xa8, 0x4a, 0x99, 0xa6, 0x52, 0x65, 0x8a, 0x5b, 0x19, 0xc4,
	0x8f, 0xaa, 0xd8, 0x34, 0xa1, 0x42, 0xfd, 0x15, 0x48, 0xa8, 0x52, 0x84, 0x50, 0x29, 0x11, 0x87,
	0xd2, 0x4b, 0x71, 0x9c, 0xc1, 0xb5, 0xea, 0x78, 0x52, 0xdb, 0x85, 0x56, 0xc0, 0x05, 0xf1, 0x07,
	0x20, 0xf1, 0x17, 0x70, 0xe5, 0xc2, 0x05, 0x71, 0xe3, 0x88, 0xd4, 0x03, 0x48, 0x45, 0x70, 0x60,
	0xa5, 0xd5, 0x6a, 0xb7, 0xdd, 0x3f, 0x64, 0xe5, 0xf1, 0x73, 0xd6, 0x76, 0x12, 0xd7, 0x71, 0x72,
	0x6b, 0x3d, 0xf3, 0xde, 0xfb, 0x7e, 0xde, 0x77, 0xe2, 0x37, 0xc6, 0xa4, 0xa3, 0xda, 0xa7, 0xd4,
	0x55, 0xce, 0xce, 0xa9, 0x7d, 0x29, 0x77, 0x6d, 0xe6, 0x32, 0xb2, 0xe8, 0x5e, 0x98, 0x6a, 0xcb,
	0x91, 0x5b, 0x26, 0xd3, 0x4e, 0x4d, 0xea, 0x38, 0xda, 0x89, 0x6a, 0x58, 0xb2, 0xbf, 0x53, 0x28,
	0xe9, 0x4c, 0x67, 0x7c, 0xa3, 0xe2, 0xfd, 0xe5, 0xc7, 0x08, 0x8b, 0x3a, 0x63, 0xba, 0x49, 0x15,
	0xb5, 0x6b, 0x28, 0xaa, 0x65, 0x31, 0x57, 0x75, 0x0d, 0x66, 0x39, 0xb0, 0xba, 0xa2, 0x31, 0xa7,
	0xc3, 0x1c, 0xa5, 0xa5, 0x3a, 0xd4, 0x2f, 0xa5, 0x7c, 0xb5, 0xd6, 0xa2, 0xae, 0xba, 0xa6, 0x74,
	0x55, 0xdd, 0xb0, 0xf8, 0x66, 0xd8, 0x3b, 0x07, 0x8a, 0xba, 0xaa, 0xad, 0x76, 0x82, 0x04, 0x81,
	0x4c, 0x66, 0xb7, 0xa9, 0x1d, 0x94, 0x84, 0x67, 0x1a, 0xeb, 0x74, 0x4d, 0xea, 0xd2, 0xf6, 0x71,
	0x78, 0x55, 0x08, 0x56, 0x4d, 0xd5, 0xe8, 0xc4, 0xd6, 0x44, 0x58, 0xb3, 0x58, 0x9b, 0x1e, 0xdb,
	0x54, 0x37, 0x1c, 0xd7, 0x0e, 0x49, 0x90, 0x4a, 0x98, 0x7c, 0xea, 0x89, 0x3c, 0xe0, 0x12, 0x9a,
	0xf4, 0xec, 0x9c, 0x3a, 0xae, 0xf4, 0x39, 0x9e, 0x8b, 0x3c, 0x75, 0xba, 0xcc, 0x72, 0x28, 0xa9,
	0xe3, 0xa2, 0x2f, 0x75, 0x01, 0x2d, 0xa3, 0x37, 0x9e, 0x2f, 0xbf, 0x2a, 0x27, 0xb5, 0x4f, 0xf6,
	0xa3, 0xeb, 0xcf, 0x5c, 0x3d, 0x58, 0xca, 0x35, 0x21, 0x52, 0x5a, 0xc5, 0x25, 0x9e, 0x7a, 0x8f,
	0xba, 0x9f, 0x78, 0x3a, 0xa1, 0x24, 0x29, 0xe1, 0x82, 0x61, 0xb5, 0xe9, 0x05, 0x4f, 0xfd, 0x5c,
	0xd3, 0xff, 0x47, 0x3a, 0xc4, 0xf3, 0xb1, 0xdd, 0x20, 0xe5, 0x3d, 0x5c, 0xe0, 0x98, 0xa0, 0xe4,
	0x95, 0x64, 0x25, 0x3c, 0x16, 0x84, 0xf8, 0x71, 0xd2, 0xcf, 0x08, 0x84, 0xd4, 0x4c, 0x33, 0x22,
	0xa4, 0x86, 0x8b, 0x5f, 0x1a, 0xa6, 0xdb, 0x4b, 0xfd, 0x66, 0x8a, 0xd4, 0x0d, 0x1e, 0xd0, 0x84,
	0x40, 0xd2, 0xc0, 0xf8, 0xa9, 0xd7, 0x0b, 0x53, 0x3c, 0xcd, 0x6b, 0xb2, 0x7f, 0x30, 0x64, 0xef,
	0x60, 0xc8, 0xfe, 0x19, 0x84, 0x83, 0x21, 0x1f, 0xa8, 0x3a, 0x85, 0xf2, 0xcd, 0x50, 0xa4, 0xa7,
	0x71, 0x3e, 0xa6, 0xb1, 0x1f, 0x3f, 0x9f, 0x05, 0x9f, 0xec, 0x0d, 0x90, 0xf8, 0xfa, 0x9d, 0x12,
	0xfd, 0xea, 0x11, 0x8d, 0xeb, 0xf8, 0xe5, 0xc0, 0xa1, 0x0f, 0x82, 0xd3, 0x99, 0xc2, 0xd8, 0x6f,
	0xb1, 0x38, 0x2c, 0x0c, 0x10, 0x8f, 0xf0, 0x8c, 0x16, 0x59, 0x01, 0x3f, 0x56, 0x93, 0x59, 0xa3,
	0xd9, 0x00, 0x3a, 0x96, 0x49, 0xd2, 0x41, 0x74, 0xcd, 0x34, 0x07, 0x8b, 0x8e, 0x3a, 0x88, 0x32,
	0x3b, 0xf8, 0x27, 0x02, 0xce, 0x01, 0x95, 0x12, 0x38, 0xf3, 0x93, 0xe1, 0x9c, 0x9c, 0xcb, 0x15,
	0xfc, 0x52, 0xcf, 0x2e, 0xff, 0x2d, 0x93, 0xc2, 0x63, 0x17, 0x2f, 0x0e, 0x0e, 0x02, 0xf2, 0xcf,
	0xf0, 0xb4, 0x16, 0x7a, 0x0e, 0x6d, 0x5e, 0xb9, 0x83, 0x3b, 0x14, 0x01, 0xd4, 0x91, 0x2c, 0x12,
	0x05, 0xa9, 0x5e, 0xc7, 0x07, 0x48, 0x9d, 0x94, 0xb3, 0x7f, 0x20, 0xa0, 0xeb, 0xab, 0x33, 0x94,
	0x2e, 0x3f, 0x3e, 0xdd, 0xe4, 0x1c, 0x7d, 0x17, 0x2f, 0x05, 0xe6, 0xec, 0xb3, 0x36, 0x6d, 0x86,
	0x46, 0x43, 0xb2, 0xab, 0x3f, 0x20, 0xbc, 0x3c, 0x3c, 0x12, 0xe0, 0xbf, 0xc0, 0xb3, 0x56, 0x6c,
	0x0d, 0x7a, 0x2d, 0x27, 0x37, 0x20, 0x9e, 0x11, 0x9a, 0xd0, 0x97, 0x4d, 0x32, 0x40, 0x7f, 0xcd,
	0x34, 0x87, 0xe9, 0x9f, 0x94, 0xd5, 0x7f, 0x07, 0xc4, 0x03, 0x6b, 0x25, 0x12, 0xe7, 0x27, 0x47,
	0x3c, 0x31, 0xeb, 0xcb, 0xbf, 0xcf, 0xe0, 0x02, 0xe7, 0x21, 0xbf, 0x20, 0x5c, 0xf4, 0xa7, 0x34,
	0x79, 0x3b, 0x59, 0x65, 0xff, 0x25, 0x41, 0x58, 0x1b, 0x21, 0xc2, 0x57, 0x21, 0x6d, 0x7d, 0xff,
	0xef, 0xe3, 0x9f, 0xa6, 0xd6, 0x49, 0x45, 0xe9, 0xc5, 0x58, 0xd4, 0xfd, 0x9a, 0xd9, 0xa7, 0x0a,
	0xb3, 0xb5, 0x13, 0x1a, 0xb0, 0xbe, 0xc5, 0x33, 0x29, 0x91, 0xeb, 0x11, 0xf9, 0x0d, 0xe1, 0x82,
	0xff, 0x23, 0x28, 0xa7, 0xa8, 0x1c, 0xbb, 0x5f, 0x08, 0x95, 0x91, 0x62, 0x40, 0x6f, 0x9d, 0xeb,
	0xdd, 0x26, 0x9b, 0x23, 0xe9, 0xe5, 0x13, 0x56, 0xf9, 0x86, 0xff, 0x5c, 0xbe, 0x23, 0xbf, 0x22,
	0xfc, 0x2c, 0xcf, 0x5a, 0x33, 0xcd, 0x54, 0xca, 0x63, 0x17, 0x92, 0x54, 0xca, 0xe3, 0x17, 0x04,
	0x69, 0x93, 0x2b, 0x7f, 0x87, 0x94, 0x47, 0x57, 0x4e, 0xee, 0x21, 0x3c, 0x13, 0x1d, 0x2f, 0x64,
	0x2b, 0x5d, 0xf7, 0x06, 0x0e, 0x53, 0x61, 0x3b, 0x5b, 0x30, 0x90, 0x7c, 0xcc, 0x49, 0x1a, 0x64,
	0x77, 0x24, 0x92, 0xd8, 0x4d, 0xb9, 0xe7, 0xc6, 0x7f, 0x08, 0xbf, 0x18, 0x2d, 0xe4, 0xd9, 0xb2,
	0x95, 0xae, 0xc5, 0xd9, 0xf1, 0x86, 0x8e, 0x7f, 0x69, 0x97, 0xe3, 0x55, 0xc9, 0xf6, 0x38, 0x78,
	0xe4, 0x1f, 0x84, 0xa7, 0xc3, 0xb3, 0x83, 0x6c, 0xa4, 0xec, 0x79, 0xff, 0x84, 0x14, 0x36, 0xb3,
	0x84, 0x02, 0xcd, 0x47, 0x9c, 0x66, 0x97, 0xd4, 0x47, 0xa3, 0x09, 0x7f, 0xb8, 0xf4, 0xac, 0xfa,
	0x0b, 0xe1, 0x17, 0xc2, 0x45, 0x3c, 0xa3, 0x36, 0x52, 0xf6, 0x3a, 0x23, 0xd6, 0x90, 0x59, 0x9e,
	0xf1, 0x3d, 0x10, 0xc1, 0x22, 0x8f, 0x10, 0x9e, 0x8d, 0xbf, 0xeb, 0xc9, 0x4e, 0xba, 0x5e, 0x0f,
	0x99, 0x70, 0x42, 0x35, 0x6b, 0x38, 0x70, 0xed, 0x73, 0xae, 0x0f, 0x49, 0x63, 0x24, 0xae, 0xbe,
	0x6f, 0xc9, 0x9e, 0x65, 0xf7, 0x11, 0x9e, 0x8b, 0x17, 0xf3, 0x6c, 0xdb, 0x49, 0xd7, 0xfb, 0x71,
	0x30, 0x13, 0x66, 0xb3, 0xd4, 0xe0, 0x98, 0xef, 0x93, 0xea, 0x78, 0x98, 0xf5, 0xc3, 0xab, 0x1b,
	0x11, 0x5d, 0xdf, 0x88, 0xe8, 0xe1, 0x8d, 0x88, 0x7e, 0xbc, 0x15, 0x73, 0xd7, 0xb7, 0x62, 0xee,
	0xff, 0x5b, 0x31, 0x77, 0x54, 0xd5, 0x0d, 0xf7, 0xe4, 0xbc, 0x25, 0x6b, 0xac, 0x93, 0xae, 0xc6,
	0x45, 0x50, 0xc5, 0xbd, 0xec, 0x52, 0xa7, 0x55, 0xe4, 0x5f, 0xe3, 0x95, 0x27, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x89, 0xdf, 0xbf, 0x68, 0xa4, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Order by index.
	Order(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error)
	// Queries a list of Order items.
	OrderAll(ctx context.Context, in *QueryAllOrderRequest, opts ...grpc.CallOption) (*QueryAllOrderResponse, error)
	// Queries a CompletedOrder by index.
	CompletedOrder(ctx context.Context, in *QueryGetCompletedOrderRequest, opts ...grpc.CallOption) (*QueryGetCompletedOrderResponse, error)
	// Queries a list of CompletedOrder items.
	CompletedOrderAll(ctx context.Context, in *QueryAllCompletedOrderRequest, opts ...grpc.CallOption) (*QueryAllCompletedOrderResponse, error)
	// Queries a ClaimedOrder by index.
	ClaimedOrder(ctx context.Context, in *QueryGetClaimedOrderRequest, opts ...grpc.CallOption) (*QueryGetClaimedOrderResponse, error)
	// Queries a list of ClaimedOrder items.
	ClaimedOrderAll(ctx context.Context, in *QueryAllClaimedOrderRequest, opts ...grpc.CallOption) (*QueryAllClaimedOrderResponse, error)
	// Queries a NodeRegistration by index.
	NodeRegistration(ctx context.Context, in *QueryGetNodeRegistrationRequest, opts ...grpc.CallOption) (*QueryGetNodeRegistrationResponse, error)
	// Queries a list of NodeRegistration items.
	NodeRegistrationAll(ctx context.Context, in *QueryAllNodeRegistrationRequest, opts ...grpc.CallOption) (*QueryAllNodeRegistrationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Order(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error) {
	out := new(QueryGetOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderAll(ctx context.Context, in *QueryAllOrderRequest, opts ...grpc.CallOption) (*QueryAllOrderResponse, error) {
	out := new(QueryAllOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/OrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedOrder(ctx context.Context, in *QueryGetCompletedOrderRequest, opts ...grpc.CallOption) (*QueryGetCompletedOrderResponse, error) {
	out := new(QueryGetCompletedOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/CompletedOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedOrderAll(ctx context.Context, in *QueryAllCompletedOrderRequest, opts ...grpc.CallOption) (*QueryAllCompletedOrderResponse, error) {
	out := new(QueryAllCompletedOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/CompletedOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimedOrder(ctx context.Context, in *QueryGetClaimedOrderRequest, opts ...grpc.CallOption) (*QueryGetClaimedOrderResponse, error) {
	out := new(QueryGetClaimedOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/ClaimedOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimedOrderAll(ctx context.Context, in *QueryAllClaimedOrderRequest, opts ...grpc.CallOption) (*QueryAllClaimedOrderResponse, error) {
	out := new(QueryAllClaimedOrderResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/ClaimedOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeRegistration(ctx context.Context, in *QueryGetNodeRegistrationRequest, opts ...grpc.CallOption) (*QueryGetNodeRegistrationResponse, error) {
	out := new(QueryGetNodeRegistrationResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/NodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeRegistrationAll(ctx context.Context, in *QueryAllNodeRegistrationRequest, opts ...grpc.CallOption) (*QueryAllNodeRegistrationResponse, error) {
	out := new(QueryAllNodeRegistrationResponse)
	err := c.cc.Invoke(ctx, "/txlabs.blocklesschain.market.Query/NodeRegistrationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Order by index.
	Order(context.Context, *QueryGetOrderRequest) (*QueryGetOrderResponse, error)
	// Queries a list of Order items.
	OrderAll(context.Context, *QueryAllOrderRequest) (*QueryAllOrderResponse, error)
	// Queries a CompletedOrder by index.
	CompletedOrder(context.Context, *QueryGetCompletedOrderRequest) (*QueryGetCompletedOrderResponse, error)
	// Queries a list of CompletedOrder items.
	CompletedOrderAll(context.Context, *QueryAllCompletedOrderRequest) (*QueryAllCompletedOrderResponse, error)
	// Queries a ClaimedOrder by index.
	ClaimedOrder(context.Context, *QueryGetClaimedOrderRequest) (*QueryGetClaimedOrderResponse, error)
	// Queries a list of ClaimedOrder items.
	ClaimedOrderAll(context.Context, *QueryAllClaimedOrderRequest) (*QueryAllClaimedOrderResponse, error)
	// Queries a NodeRegistration by index.
	NodeRegistration(context.Context, *QueryGetNodeRegistrationRequest) (*QueryGetNodeRegistrationResponse, error)
	// Queries a list of NodeRegistration items.
	NodeRegistrationAll(context.Context, *QueryAllNodeRegistrationRequest) (*QueryAllNodeRegistrationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Order(ctx context.Context, req *QueryGetOrderRequest) (*QueryGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (*UnimplementedQueryServer) OrderAll(ctx context.Context, req *QueryAllOrderRequest) (*QueryAllOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAll not implemented")
}
func (*UnimplementedQueryServer) CompletedOrder(ctx context.Context, req *QueryGetCompletedOrderRequest) (*QueryGetCompletedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedOrder not implemented")
}
func (*UnimplementedQueryServer) CompletedOrderAll(ctx context.Context, req *QueryAllCompletedOrderRequest) (*QueryAllCompletedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedOrderAll not implemented")
}
func (*UnimplementedQueryServer) ClaimedOrder(ctx context.Context, req *QueryGetClaimedOrderRequest) (*QueryGetClaimedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimedOrder not implemented")
}
func (*UnimplementedQueryServer) ClaimedOrderAll(ctx context.Context, req *QueryAllClaimedOrderRequest) (*QueryAllClaimedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimedOrderAll not implemented")
}
func (*UnimplementedQueryServer) NodeRegistration(ctx context.Context, req *QueryGetNodeRegistrationRequest) (*QueryGetNodeRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRegistration not implemented")
}
func (*UnimplementedQueryServer) NodeRegistrationAll(ctx context.Context, req *QueryAllNodeRegistrationRequest) (*QueryAllNodeRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRegistrationAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Order(ctx, req.(*QueryGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/OrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderAll(ctx, req.(*QueryAllOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCompletedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/CompletedOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedOrder(ctx, req.(*QueryGetCompletedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCompletedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/CompletedOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedOrderAll(ctx, req.(*QueryAllCompletedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/ClaimedOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimedOrder(ctx, req.(*QueryGetClaimedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimedOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimedOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/ClaimedOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimedOrderAll(ctx, req.(*QueryAllClaimedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/NodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeRegistration(ctx, req.(*QueryGetNodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeRegistrationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeRegistrationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txlabs.blocklesschain.market.Query/NodeRegistrationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeRegistrationAll(ctx, req.(*QueryAllNodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txlabs.blocklesschain.market.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Query_Order_Handler,
		},
		{
			MethodName: "OrderAll",
			Handler:    _Query_OrderAll_Handler,
		},
		{
			MethodName: "CompletedOrder",
			Handler:    _Query_CompletedOrder_Handler,
		},
		{
			MethodName: "CompletedOrderAll",
			Handler:    _Query_CompletedOrderAll_Handler,
		},
		{
			MethodName: "ClaimedOrder",
			Handler:    _Query_ClaimedOrder_Handler,
		},
		{
			MethodName: "ClaimedOrderAll",
			Handler:    _Query_ClaimedOrderAll_Handler,
		},
		{
			MethodName: "NodeRegistration",
			Handler:    _Query_NodeRegistration_Handler,
		},
		{
			MethodName: "NodeRegistrationAll",
			Handler:    _Query_NodeRegistrationAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Order[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CompletedOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompletedOrder) > 0 {
		for iNdEx := len(m.CompletedOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimedOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimedOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimedOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimedOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimedOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimedOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimedOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimedOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimedOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimedOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimedOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimedOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimedOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimedOrder) > 0 {
		for iNdEx := len(m.ClaimedOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimedOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NodeRegistration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeRegistration) > 0 {
		for iNdEx := len(m.NodeRegistration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeRegistration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCompletedOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCompletedOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CompletedOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCompletedOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCompletedOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedOrder) > 0 {
		for _, e := range m.CompletedOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClaimedOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClaimedOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClaimedOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClaimedOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClaimedOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimedOrder) > 0 {
		for _, e := range m.ClaimedOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeRegistration.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNodeRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeRegistration) > 0 {
		for _, e := range m.NodeRegistration {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &OrderFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, Order{})
			if err := m.Order[len(m.Order)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompletedOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedOrder = append(m.CompletedOrder, CompletedOrder{})
			if err := m.CompletedOrder[len(m.CompletedOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimedOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimedOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimedOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimedOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimedOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimedOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimedOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimedOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimedOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimedOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimedOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimedOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedOrder = append(m.ClaimedOrder, ClaimedOrder{})
			if err := m.ClaimedOrder[len(m.ClaimedOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeRegistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeRegistration = append(m.NodeRegistration, NodeRegistration{})
			if err := m.NodeRegistration[len(m.NodeRegistration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
